// <auto-generated />
using System;
using AssessmentProject.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AssessmentProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AssessmentProject.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99b9fa2b-97ef-41f1-8dfc-2c64ad6a6450"),
                            CreatedAt = new DateTime(2023, 9, 10, 18, 53, 56, 939, DateTimeKind.Utc).AddTicks(1149),
                            Name = "Department1",
                            PersonId = new Guid("b407315e-e24d-4a8a-ba35-22fbf815011a"),
                            UpdatedAt = new DateTime(2023, 9, 10, 18, 53, 56, 939, DateTimeKind.Utc).AddTicks(1152)
                        },
                        new
                        {
                            Id = new Guid("4113635f-34cc-4165-913c-e66d831cb17d"),
                            CreatedAt = new DateTime(2023, 9, 10, 18, 53, 56, 939, DateTimeKind.Utc).AddTicks(1153),
                            Name = "Department2",
                            PersonId = new Guid("b407315e-e24d-4a8a-ba35-22fbf815011a"),
                            UpdatedAt = new DateTime(2023, 9, 10, 18, 53, 56, 939, DateTimeKind.Utc).AddTicks(1154)
                        });
                });

            modelBuilder.Entity("AssessmentProject.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QualificationId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QualificationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TypeId");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b407315e-e24d-4a8a-ba35-22fbf815011a"),
                            Apelido = "PersonOne",
                            CreatedAt = new DateTime(2023, 9, 10, 18, 53, 56, 939, DateTimeKind.Utc).AddTicks(1104),
                            Document = "48750168088",
                            Email = "admin@admin.com",
                            IsActivated = true,
                            Name = "Admin",
                            Password = "admin",
                            PersonAddress = "{\r\n  \"cep\": \"62040-020\",\r\n  \"logradouro\": \"Rua Raimundo Mendes Aguiar\",\r\n  \"complemento\": \"\",\r\n  \"bairro\": \"Coração de Jesus\",\r\n  \"localidade\": \"Sobral\",\r\n  \"uf\": \"CE\",\r\n  \"ibge\": \"2312908\",\r\n  \"gia\": \"\",\r\n  \"ddd\": \"88\",\r\n  \"siafi\": \"1559\"\r\n}",
                            QualificationId = 3,
                            RoleId = 2,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2023, 9, 10, 18, 53, 56, 939, DateTimeKind.Utc).AddTicks(1106)
                        },
                        new
                        {
                            Id = new Guid("c6725529-d519-43e5-9acd-eb47edebf4f0"),
                            Apelido = "PersonTwo",
                            CreatedAt = new DateTime(2023, 9, 10, 18, 53, 56, 939, DateTimeKind.Utc).AddTicks(1137),
                            Document = "82416611003",
                            Email = "person1@example.com",
                            IsActivated = true,
                            Name = "Person 1",
                            Password = "password1",
                            PersonAddress = "{\r\n  \"cep\": \"62040-020\",\r\n  \"logradouro\": \"Rua Raimundo Mendes Aguiar\",\r\n  \"complemento\": \"\",\r\n  \"bairro\": \"Coração de Jesus\",\r\n  \"localidade\": \"Sobral\",\r\n  \"uf\": \"CE\",\r\n  \"ibge\": \"2312908\",\r\n  \"gia\": \"\",\r\n  \"ddd\": \"88\",\r\n  \"siafi\": \"1559\"\r\n}",
                            QualificationId = 3,
                            RoleId = 1,
                            TypeId = 1,
                            UpdatedAt = new DateTime(2023, 9, 10, 18, 53, 56, 939, DateTimeKind.Utc).AddTicks(1137)
                        });
                });

            modelBuilder.Entity("AssessmentProject.Models.PersonQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("QualificationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonQualifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QualificationName = "Cliente"
                        },
                        new
                        {
                            Id = 2,
                            QualificationName = "Fornecedor"
                        },
                        new
                        {
                            Id = 3,
                            QualificationName = "Colaborador"
                        });
                });

            modelBuilder.Entity("AssessmentProject.Models.PersonRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleType = "User"
                        },
                        new
                        {
                            Id = 2,
                            RoleType = "Admin"
                        });
                });

            modelBuilder.Entity("AssessmentProject.Models.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Fisica"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Juridica"
                        });
                });

            modelBuilder.Entity("AssessmentProject.Models.Department", b =>
                {
                    b.HasOne("AssessmentProject.Models.Person", "Person")
                        .WithMany("Departments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AssessmentProject.Models.Person", b =>
                {
                    b.HasOne("AssessmentProject.Models.PersonQualification", "PersonQualification")
                        .WithMany("Persons")
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentProject.Models.PersonRole", "PersonRole")
                        .WithMany("Persons")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AssessmentProject.Models.PersonType", "PersonType")
                        .WithMany("Persons")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonQualification");

                    b.Navigation("PersonRole");

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("AssessmentProject.Models.Person", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("AssessmentProject.Models.PersonQualification", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("AssessmentProject.Models.PersonRole", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("AssessmentProject.Models.PersonType", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
